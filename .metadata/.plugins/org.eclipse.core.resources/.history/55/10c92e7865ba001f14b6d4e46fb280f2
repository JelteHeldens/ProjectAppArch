package com.AppArch.Project.Controller;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.client.RestTemplate;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;

import com.AppArch.Project.Model.Offer;
import com.AppArch.Project.Model.State;
import com.AppArch.Project.Model.Task;
import com.AppArch.Project.Model.User;
import com.AppArch.Project.Model.UserAuthorization;
import com.AppArch.Project.Repository.UserRepo;
import com.AppArch.Project.Service.OfferRepoService;
import com.AppArch.Project.Service.TaskRepoService;
import com.AppArch.Project.Service.UserRepoService;
import com.AppArch.Project.Service.UserRepoServiceImpl;

import jakarta.annotation.PostConstruct;
import jakarta.servlet.ServletContext;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;

@Controller
public class MainController {
	
	@Autowired
	private UserRepoService UserRepS;
	
	@Autowired
	private TaskRepoService taskRepS;
	
	@Autowired
	private OfferRepoService offerRepoS;
	
	@Autowired
	private ServletContext ctx;
	
	//Drie get mapping naar homepage: index.html
	@GetMapping("/")
	public String home(HttpServletRequest request)
	{
		ctx.setAttribute("tasks",taskRepS.getTasks());
		System.out.println(request.isUserInRole("ROLE_klusjesman"));
		if(request.isUserInRole("ROLE_klusjesman")){
			return "klusjesman/index";
		}
		else {
			return "klant/index";
		}
	}
	
	@GetMapping("/index")
	public String index(HttpServletRequest request)
	{
		ctx.setAttribute("tasks",taskRepS.getTasks());
		System.out.println(request.isUserInRole("ROLE_klusjesman"));
		if(request.isUserInRole("ROLE_klusjesman")){
			return "klusjesman/index";
		}
		else {
			return "klant/index";
		}
	}
	
	@GetMapping("/home")
	public String homep(HttpServletRequest request)
	{
		ctx.setAttribute("tasks",taskRepS.getTasks());
		System.out.println(request.isUserInRole("ROLE_klusjesman"));
		if(request.isUserInRole("ROLE_klusjesman")){
			return "klusjesman/index";
		}
		else {
			return "klant/index";
		}
	}
	
	@RequestMapping("/login")
	public String inlog()
	{
		return "login";
	}
	
	@GetMapping("/register")
	public String reg()
	{
		return "register";
	}
	
	@GetMapping("/profile")
	public String profiles(HttpServletRequest request) {
		Optional<User> user = UserRepS.getUserById(UserRepS.getCurrentUser());
		String email = user.get().getEmail();
		ctx.setAttribute("user",user.get());
		
		//Querries moeten later aangepast worden. Onderscheid moet gemaakt worden tussen klant en klusjesman.
		//Een klusjesman is niet de 'owner' van een task, bij deze queries wordt zowel klant als klusjesman gezien als owner. Dit is tijdelijk voorbeeld dus.	
		List<Task> userTasksTOEGEWEZEN = taskRepS.getUserTasksState(user.get(), State.TOEGEWEZEN);
		ctx.setAttribute("userTasksTOEGEWEZEN",userTasksTOEGEWEZEN);
		List<Task> userTasksUITGEVOERD = taskRepS.getUserTasksState(user.get(), State.UITGEVOERD);
		ctx.setAttribute("userTasksUITGEVOERD",userTasksUITGEVOERD);
		List<Task> userTasksDone = taskRepS.getUserTasksDone(user.get());
		ctx.setAttribute("userTasksDone",userTasksDone);
		
		System.out.println(user.get().getRole());
		//Gebruiker is klusjesman
		if (request.isUserInRole("ROLE_klusjesman")) {
			
			//List<Offer> userTasksGEBODEN = taskRepS.getUserTasksState(user.get(), State.BESCHIKBAAR);
			/*List<Offer> userTasksGEBODEN = offerRepoS.findTasksByEmail(email);
			for (int i = 0; i < userTasksGEBODEN.size(); i++) {
			    System.out.println(userTasksGEBODEN.get(i).getTaskId());
			}
			ctx.setAttribute("userTasksGEBODEN",userTasksGEBODEN);*/
			
			return "klusjesman/profile";
		}
		//Gebruiker is klant
		else {
			List<Task> userTasksOpenstaand = taskRepS.getUserTasksStateLessThan(user.get(), State.TOEGEWEZEN);
			ctx.setAttribute("userTasksOpenstaand",userTasksOpenstaand);
			
			return "klant/profile";
		}
	}
	
	@PostMapping("/registreer")
	public String registreer(HttpServletRequest req) {
		RestTemplate rest = new RestTemplate();
		User u = new User(req.getParameter("name"),req.getParameter("email"),req.getParameter("pswd"),req.getParameter("userType"),1);
		rest.postForObject("http://localhost:8080/user/add",u , ResponseEntity.class);
		UserAuthorization ua = new UserAuthorization(req.getParameter("email"),req.getParameter("userType"));
		rest.postForObject("http://localhost:8080//user/add/authorities", ua,ResponseEntity.class) ;
		return "redirect:/login";
	}
	

	
	@PostMapping("/edit/profiel")
	public String editProfile(HttpServletRequest req) {
		RestTemplate rest = new RestTemplate();
		String email = SecurityContextHolder.getContext().getAuthentication().getName();
		UserRepS.updateUser(email, req.getParameter("NEWNAME"));
		return "redirect:/profile";
	}
	

	
	@GetMapping("/info")
	public String info(HttpSession ses)
	{
		return "info";
	}
	
}
