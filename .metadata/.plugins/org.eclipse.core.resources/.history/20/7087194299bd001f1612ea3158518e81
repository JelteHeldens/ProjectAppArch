package com.AppArch.Project.Controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.client.RestTemplate;

import com.AppArch.Project.Model.Task;
import com.AppArch.Project.Model.User;
import com.AppArch.Project.Model.Offer;
import com.AppArch.Project.Model.OfferKey;
import com.AppArch.Project.Model.State;
import com.AppArch.Project.Service.OfferRepoService;
import com.AppArch.Project.Service.TaskRepoService;
import com.AppArch.Project.Service.UserRepoService;

import org.springframework.ui.Model;
import jakarta.servlet.ServletContext;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;

@Controller
public class TaskController {
	
	@Autowired
	private UserRepoService UserRepS;
	
	@Autowired
	private TaskRepoService taskRepS;
	
	@Autowired
	private OfferRepoService offerRepoS;
	
	@Autowired
	private ServletContext ctx;
	
	
	@GetMapping("/newJob")
	public String newJob(HttpSession ses)
	{
		return "newJob";
	}
	
	@PostMapping("/taskform")
	public String addtasks(HttpServletRequest req) {
		RestTemplate rest = new RestTemplate();
		String email = SecurityContextHolder.getContext().getAuthentication().getName(); //take the email of the user
		Optional<User> u = UserRepS.getUserById(email);
		if (!u.isPresent()) {
		    throw new RuntimeException("User not found");
		}
		Task task = new Task(req.getParameter("title"),
                req.getParameter("description"),
                Float.parseFloat(req.getParameter("price")),
                u.get());
		System.out.println(task.getTitle());
		
		rest.postForObject("http://localhost:8080/tasks/add", task, ResponseEntity.class);

		ctx.setAttribute("tasks",taskRepS.getTasks());
		return "redirect:/";
	}
	

    @GetMapping("/taskDetail/{id}")
    public String getTaskDetail(@PathVariable int id, Model m) {
        Optional<Task> task = taskRepS.getTaskById(id);
        if(task.get().getStatus() == State.BESCHIKBAAR){
	        m.addAttribute("task", task.get());
	        return "klant/task";
        }
        else {
        	return "redirect:/profile";
        }
    }
    
    @PostMapping("/taskedite")
    public String editTask(HttpServletRequest req) {
    	RestTemplate rest = new RestTemplate();
        
    	int id = Integer.parseInt(req.getParameter("id"));
        String title = req.getParameter("title");
        String description = req.getParameter("description");
        float price = Float.parseFloat(req.getParameter("price"));

        // Create a map to hold form data
        Map<String, Object> taskData = new HashMap<>();
        taskData.put("id", id);
        taskData.put("title", title);
        taskData.put("description", description);
        taskData.put("price", price);

        // Send POST request to the API
        rest.postForEntity("http://localhost:8080/tasks/update", taskData, Void.class);
    	//Task task = taskRepS.getTaskById(Integer.parseInt(req.getParameter("id"))).get();
    	//taskRepS.updateTask(Integer.parseInt(req.getParameter("id")), req.getParameter("title"), req.getParameter("description"), Float.parseFloat(req.getParameter("price"))); //(id, title, description, price);
    	
    	//rest.postForObject("http://localhost:8080/tasks/add", task, ResponseEntity.class);
    	return "redirect:/profile";
    }
    
    @GetMapping("/taskGebode/{id}")
	public String gebodeTask(@PathVariable int id, Model m) {
		//Optional<User> user = UserRepS.getUserById(UserRepS.getCurrentUser());
    	Optional<Task> t = taskRepS.getTaskById(id);
    	Map<User, Integer> userRatings = new HashMap<>();
		List<User> GebodenUsers = offerRepoS.findUserByTask(t.get());
		for(int i=0; i<GebodenUsers.size(); i++) {
			userRatings.put(GebodenUsers.get(i), taskRepS.getAverageRating(GebodenUsers.get(i)));
		}
		m.addAttribute("userRatings",userRatings);
		m.addAttribute("huidigID", id);
		return "/klant/geboden";
	}
    
    @GetMapping("/taskReview/{id}")
	public String reviewTask(@PathVariable int id, Model m) {
		//Optional<User> user = UserRepS.getUserById(UserRepS.getCurrentUser());
    	Optional<Task> t = taskRepS.getTaskById(id);
    	 m.addAttribute("task", t.get());
		return "/klant/review";
	}
    
    //rating toekennen aan task
    @PostMapping("/finalizeTask")
    public String finalizeTask(HttpServletRequest req) {
    	RestTemplate rest = new RestTemplate();
        
    	int id = Integer.parseInt(req.getParameter("id"));
    	int rating = Integer.parseInt(req.getParameter("rating"));
    	taskRepS.reviewTask(id, rating);
		taskRepS.changeState(id, State.BEOORDEELD);

    	 return "redirect:/profile";
	}
    
    @PostMapping("/gebodeTask")
    public String userSelect(HttpServletRequest req) {
    	RestTemplate rest = new RestTemplate();
    	String klusjesmanEmail = req.getParameter("klusjesman");
    	//int id = Integer.parseInt(req.getParameter("id"));
    	//User klusjesman = UserRepS.getUserById(klusjesmanEmail).get();
    	//taskRepS.addExecutor(id, klusjesman);
        Map<String, String> params = new HashMap<>();
        params.put("id", req.getParameter("id"));
        params.put("email", klusjesmanEmail);
    	rest.postForEntity("http://localhost:8080/toewijzing/", params, Void.class);
    	return "redirect:/profile";
    }
    
	@PostMapping("/taskDelete")
	public String removeTask(HttpServletRequest req) {
		RestTemplate rest = new RestTemplate();
		rest.delete("http://localhost:8080/tasks/delete/"+req.getParameter("id"));
		return "redirect:/profile";
	}
	
	@PostMapping("/takeTask")
	public String bod(HttpServletRequest req) {
		RestTemplate rest = new RestTemplate();
		String email = SecurityContextHolder.getContext().getAuthentication().getName(); //take the email of the user
		int id = Integer.parseInt(req.getParameter("id"));
		
		Map<String, Object> offerData = new HashMap<>();
		offerData.put("id", id);
		offerData.put("email", email);
		
		/*Optional<User> u = UserRepS.getUserById(email);
		Optional<Task> t = taskRepS.getTaskById(Integer.parseInt(req.getParameter("id")));
		Offer o = new Offer(u.get(),t.get());
		offerRepoS.addOffer(o);*/
		rest.postForEntity("http://localhost:8080/offer/add", offerData, Void.class);
		return "redirect:/";
	}

	//Markeren van task als uitgevoerd door klusjesman
	@PostMapping("/completeTask")
	public String complete(HttpServletRequest req) {
		RestTemplate rest = new RestTemplate();
		String email = SecurityContextHolder.getContext().getAuthentication().getName(); //take the email of the user
		int id = Integer.parseInt(req.getParameter("id"));
		
		taskRepS.changeState(id, State.UITGEVOERD);
		return "redirect:/profile";
	}
	
	@PostMapping("/bodIntrekken")
	public String bodIntrekken(HttpServletRequest req) {
		User u = UserRepS.getUserById(UserRepS.getCurrentUser()).get();
		int id = Integer.parseInt(req.getParameter("id"));
		Task t = taskRepS.getTaskById(id).get();
		if(t.getStatus() != State.GEBODEN) {
			return "redirect:/profile";
		}
		else {
			OfferKey k = new OfferKey(u,t);
			offerRepoS.deleteById(k);
			int nubmer = offerRepoS.getNumberTaskByTaskId(t);
			if (nubmer == 0) {
				taskRepS.changeState(id, State.BESCHIKBAAR);
			}
			return "redirect:/profile";
		}
	}

	

}
