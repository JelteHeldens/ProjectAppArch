package com.AppArch.Project.Config;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity

public class SecurityConfig {
	@Autowired
	DataSource dataSource;

    @Bean
    PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	@Bean
	SecurityFilterChain beveilig(HttpSecurity http) throws Exception {
		http.authorizeHttpRequests(authorize -> authorize
				.requestMatchers("/", "/css/**", "/js/**", "/images/**").permitAll()
				.requestMatchers("/overview").authenticated()
				).formLogin(form -> form.loginPage("/login").permitAll()
				).logout (logout -> logout.logoutSuccessUrl("/"));
		return http.build();
				
	}
	
	@Autowired
	public void dbauth(AuthenticationManagerBuilder auth) throws Exception{
		auth.jdbcAuthentication().dataSource(dataSource)
		.usersByUsernameQuery("select email, passwd, 1 from AA_customers where email = ?")
		.authoritiesByUsernameQuery("select email, authority from AA_authorities where email = ?");
	}
}
