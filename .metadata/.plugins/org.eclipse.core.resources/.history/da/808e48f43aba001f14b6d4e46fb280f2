package com.AppArch.Project.Controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.client.RestTemplate;

import com.AppArch.Project.Model.Task;
import com.AppArch.Project.Model.User;
import com.AppArch.Project.Model.State;
import com.AppArch.Project.Service.TaskRepoService;
import com.AppArch.Project.Service.UserRepoService;

import org.springframework.ui.Model;
import jakarta.servlet.ServletContext;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;

@Controller
public class TaskController {
	
	@Autowired
	private UserRepoService UserRepS;
	
	@Autowired
	private TaskRepoService taskRepS;
	
	@Autowired
	private ServletContext ctx;
	
	
	@GetMapping("/newJob")
	public String newJob(HttpSession ses)
	{
		return "newJob";
	}
	
	@PostMapping("/taskform")
	public String addtasks(HttpServletRequest req) {
		RestTemplate rest = new RestTemplate();
		String email = SecurityContextHolder.getContext().getAuthentication().getName(); //take the email of the user
		Optional<User> u = UserRepS.getUserById(email);
		if (!u.isPresent()) {
		    throw new RuntimeException("User not found");
		}
		Task task = new Task(req.getParameter("title"),
                req.getParameter("description"),
                Float.parseFloat(req.getParameter("price")),
                u.get());
		System.out.println(task.getTitle());
		
		rest.postForObject("http://localhost:8080/tasks/add", task, ResponseEntity.class);

		ctx.setAttribute("tasks",taskRepS.getTasks());
		return "redirect:/";
	}
	

    @GetMapping("/taskDetail/{id}")
    public String getTaskDetail(@PathVariable int id, Model m) {
        Optional<Task> task = taskRepS.getTaskById(id);
        if(task.get().getStatus() == State.BESCHIKBAAR){
	        m.addAttribute("task", task.get());
	        return "/klant/editTask";
        }
        else {
        	return "redirect:/klant/profile";
        }
    }
    
    @PostMapping("/taskedite")
    public String editTask(HttpServletRequest req) {
    	RestTemplate rest = new RestTemplate();
    	System.out.println(req.getParameter("id"));
    	return "redirect:klant/profile";
    }
    
	

}
